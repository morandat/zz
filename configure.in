# -*- mode:Shell-script -*-

AC_PREREQ(2.59)

AC_INIT
AC_CONFIG_SRCDIR([configure.in])
AC_CONFIG_AUX_DIR(config)
AC_CONFIG_HEADER([config.h])
AC_HEADER_ASSERT

#AC_DISABLE_SHARED

Z2ZRT_MAJOR_VERSION=4
Z2ZRT_MINOR_VERSION=0
Z2ZRT_MICRO_VERSION=0
VERSION=$Z2ZRT_MAJOR_VERSION.$Z2ZRT_MINOR_VERSION.$Z2ZRT_MICRO_VERSION${SNAPSHOT:+.$SNAPSHOT}

# +1 : ? : +1  == new interface that does not break old one
# +1 : ? : 0   == new interface that breaks old one
#  ? : ? : 0   == no new interfaces, but breaks apps
#  ? :+1 : ?   == just some internal changes, nothing breaks but might work 
#                 better
# CURRENT : REVISION : AGE
# VERSION=1:0:0

AC_SUBST(Z2ZRT_MAJOR_VERSION)
AC_SUBST(Z2ZRT_MINOR_VERSION)
AC_SUBST(Z2ZRT_MICRO_VERSION)
AC_SUBST(VERSION)

AM_INIT_AUTOMAKE("z2zrt", $VERSION)

AC_CANONICAL_HOST

# Need this to get pthread etc.
AC_DEFINE(_GNU_SOURCE,1,"POSIXandGNU extensions")

#####################
# Checks for programs
#.
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_LIBTOOL

# platform idioms

if test "x$GCC" = "xyes"; then
  case " $CFLAGS " in
  *[\ \	]-Wall[\ \	]*) ;;
  *) CFLAGS="$CFLAGS -Wall" ;;
  esac
fi


#######################################################################################
# DEBUG INFO
#######################################################################################

# add checking message
AC_MSG_CHECKING(whether to build with debug information)

# create configure parameter and init variable $debuger
debuger=no
AC_ARG_ENABLE(debug,
	AC_HELP_STRING(
	    [--enable-debug],
	    [enable debug data generation [default=no]]
	),
  	debuger="$enableval"
)

# resulting value to screen (to complete checking message)
AC_MSG_RESULT($debuger)

# set DEBUG flag and introduce additional compiler flags
if test x"$debuger" = x"yes"; then
      AC_DEFINE(DEBUG, [1], [Define to 1 to compile in debug information])
#	CXXFLAGS="$CXXFLAGS -g -Wall -Werror"
fi	

#######################################################################################
# Test for pthread and enable rollingfile code which depends on that
# if we find it
#######################################################################################

AC_CHECK_HEADER(pthread.h,[
        AC_CHECK_LIB(pthread,pthread_mutex_init,[
                LIBS="$LIBS -lpthread"
                AC_DEFINE([WITH_ROLLINGFILE], [], [Define if we found pthread.h libpthread])
                AC_MSG_NOTICE([Compile with rollingfile code])
                with_rollingfile=true],[AC_MSG_NOTICE([No pthread--not compiling rollingfile code])]
                )
])
AM_CONDITIONAL(WITH_ROLLINGFILE, test "$with_rollingfile" = "true")

#####################################
# Enable test compilation if required
#
#AC_ARG_ENABLE(test,
#       AC_HELP_STRING([--enable-test], [LOG4C: compile test programs (default=no)]))
#AM_CONDITIONAL(TEST, test x$enable_test = xyes)

#####################################
# Enable APPBUNDLE For MAC
#
ENABLE_APPBUNDLE
AM_CONDITIONAL([APPBUNDLE], [test x$BUILD_APPBUNDLE = xyes])

#######################################################################################
# Checks for library functions.
#######################################################################################

AC_CHECK_FUNCS(bzero)
AC_CHECK_FUNCS(getaddrinfo)
AC_CHECK_FUNCS(gethostname)
AC_CHECK_FUNCS(gethostbyname2)
AC_CHECK_FUNCS(gethostbyname_r)
AC_CHECK_FUNCS(getnameinfo)
AC_CHECK_FUNCS(if_nametoindex)
AC_CHECK_FUNCS(inet_aton)
AC_CHECK_FUNCS(inet_pton)
AC_CHECK_FUNCS(snprintf)
AC_CHECK_FUNCS(sockatmark)
AC_CHECK_FUNCS(vsnprintf)

#######################################################################################
# Let's see if the system really supports IPv6.
# if test x$enable_ipv6 = xyes ; then
#######################################################################################


AC_MSG_NOTICE(------ Testing IPv6 Support)
AC_MSG_CHECKING(for IPv6 support)
AC_CACHE_VAL(ac_cv_ipv6,
	AC_TRY_RUN([
	#include <sys/types.h>
	#include <sys/socket.h>
	#include <netinet/in.h>
	/* Make sure the definitions for AF_INET6 and struct sockaddr_in6
	 * are defined, and that we can actually create an IPv6 TCP socket.
	 */
	main()
	{
		int fd;
		struct sockaddr_in6 foo;
		fd = socket(AF_INET6, SOCK_STREAM, 0);
		exit(fd >= 0 ? 0 : 1);
	}],
	ac_cv_ipv6=yes,
	ac_cv_ipv6=no,
	ac_cv_ipv6=no))
AC_MSG_RESULT($ac_cv_ipv6)
if test $ac_cv_ipv6 = yes ; then
	AC_DEFINE(IPV6, 1, Define to 1 if the system supports IPv6)
fi

#######################################################################################
# Enabling ipv6
#######################################################################################

AC_ARG_ENABLE(ipv6,
       [AC_HELP_STRING([--enable-ipv6],
                        [enable support for IPv6 @<:@default=yes@:>@])],
       enable_ipv6=$enableval,
       enable_ipv6=no)

#######################################################################################
# Enabling ipv6 only if the host is ipv6 capable
#######################################################################################

if test "$enable_ipv6" = yes && test "$ac_cv_ipv6" = yes; then
       AC_DEFINE(IPV6_SUPPORTED, 1, [Define this if you want IPv6 support compiled in])
       else
        enable_ipv6=
		AC_MSG_ERROR([You must enable ipv6 support. Retry with ./configure --enable-ipv6])
       fi

AC_SUBST(enable_ipv6)
AM_CONDITIONAL(CONFIG_IPV6, [test "$enable_ipv6" = "yes"])

#######################################################################################
# Let's see if the system really supports multicasting.
#######################################################################################

AC_MSG_CHECKING(for multicast support)
AC_CACHE_VAL(ac_cv_multicast,
	AC_TRY_RUN([
		#include <sys/types.h>
		#include <sys/socket.h>
		#include <netinet/in.h>
		main()
		{
			int fd;
			unsigned char flag = 1;
			struct sockaddr_in foo;
			struct ip_mreq mreq;
			fd = socket(AF_INET, SOCK_DGRAM, 0);
			if (fd < 0) exit(1);
			if (setsockopt(fd, IPPROTO_IP, IP_MULTICAST_LOOP,
				       (void*)&flag, sizeof(flag)) < 0)
				exit(1);
			exit(0);
		}],
		ac_cv_multicast=yes,
		ac_cv_multicast=no,
		ac_cv_multicast=no))
	AC_MSG_RESULT($ac_cv_multicast)
	if test $ac_cv_multicast = yes ; then
		AC_DEFINE(MCAST, 1, Define to 1 if the system supports IP Multicast)
	fi
	

#######################################################################################
# Let's see if APP Bundle have been selected
#######################################################################################	

if test "$BUILD_APPBUNDLE" = yes
	then
		AC_MSG_NOTICE(------ Building a Mac OS X appbundle:	Yes)
	else
		AC_MSG_NOTICE(------ Building a Mac OS X appbundle:	No)
	fi
	
#####################################
# Checks for libraries.
#

#####################################
# Checks for header files.
#
#AC_HEADER_STDC

AC_CHECK_HEADERS([ \
    arpa/inet.h \
    errno.h \
    fcntl.h \
    getopt.h \
    locale.h \
    netdb.h \
    sys/socket.h \
    netinet/in.h \
    pthread.h \
    stdarg.h \
    stdlib.h \
    stdio.h \
    string.h \
    strings.h \
    stropts.h \
    sys/lock.h \
    syslog.h \
    unistd.h \
    ])

# OPTIONS TO OPTIMIZE THE COMPILER
OPTIM="-O2"
AC_SUBST(OPTIM)

#CFLAGS="CFLAGS -pedantic"

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T
AC_HEADER_TIME
AC_STRUCT_TM

# Checks for library functions.
AC_FUNC_ALLOCA
AC_FUNC_MALLOC
AC_FUNC_MMAP
AC_FUNC_REALLOC
AC_FUNC_UTIME_NULL
AC_FUNC_VPRINTF
AC_CHECK_FUNCS([memset munmap strdup strerror strncasecmp strrchr strstr strnstr])

#MISSING=""
#AC_CHECK_FUNC(strnstr, AC_DEFINE(HAVE_STRNSTR), MISSING="${MISSING} strnstr.c ")
#AC_SUBST(MISSING)

# Checks for macro va_copy
AC_MSG_CHECKING(for va_copy)
AC_TRY_LINK([
	#include <stdarg.h>
], [
	va_list ap;
	va_list ap_copy;
	va_copy(ap, ap_copy);
], [
	AC_MSG_RESULT(yes)
	AC_DEFINE([HAVE_VA_COPY], [1], [Define to 1 if VA_COPY is defined.])
], [
	AC_MSG_RESULT(no)
])

###################
#valgrind/Makefile \
AC_CHECK_TOOL([STRIP],[strip])
AC_OUTPUT(Makefile \
valgrind/Makefile \
src/Makefile \
)
